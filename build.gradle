plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
    id 'java'
    id 'idea'

}

group = 'com.wheremydocs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

defaultTasks 'bootRun'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    springCloudVersion = "2021.0.1"
    testcontainersVersion = '1.16.3'
    modelmapperVersion = '3.1.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets {
    'integration-test' {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    developmentOnly
    runtimeClasspath { extendsFrom developmentOnly }
    compileOnly { extendsFrom annotationProcessor }

    integrationTestImplementation { extendsFrom implementation }
    integrationTestRuntimeOnly { extendsFrom runtimeOnly }
}

springBoot {
    buildInfo()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.data:spring-data-envers"
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation "org.modelmapper:modelmapper:${modelmapperVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationTestImplementation 'org.springframework.security:spring-security-test'
    integrationTestImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    integrationTestImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
}

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
}


task integrationTest(type: Test) {
    systemProperty 'spring.profiles.active', 'test'
    testClassesDirs = sourceSets.'integration-test'.output.classesDirs
    classpath = sourceSets.'integration-test'.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

sonarqube {
    properties {
        property "sonar.projectKey", "wheremydocs_customer"
        property "sonar.organization", "wheremydocs"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        properties["sonar.tests"] += sourceSets.'integration-test'.allSource.srcDirs
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
    executionData(test, integrationTest)
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
